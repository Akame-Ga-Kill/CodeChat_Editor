let renderer,rendererUrl;let{delayWorkerLoading:e}=window.graphvizWebComponent||{};function ensureConfiguration(){rendererUrl||({rendererUrl="https://unpkg.com/graphviz-webcomponent@1.1.0/dist/renderer.min.js"}=window.graphvizWebComponent||{})}function getRenderer(){return renderer||(ensureConfiguration(),renderer=new Worker(rendererUrl)),renderer}e||setTimeout(getRenderer);let graphKey=Symbol("graph"),scaleKey=Symbol("scale"),render_id=Number.MIN_SAFE_INTEGER;function requestRendering(e,r,t){let n=getRenderer();return n.addEventListener("message",t),n.postMessage({script:r||e.graph,render_id}),render_id++}function closeRendering(e){let r=getRenderer();r.removeEventListener("message",e)}function triggerEvent(e,r,t){e.dispatchEvent(new CustomEvent(r,{detail:t}))}function applyScale(e){let r=e.shadowRoot.children[0],t=e.scale;r&&(t?(r.style.transform=`scale(${t})`,r.style.transformOrigin="top left"):(r.style.transform="",r.style.transformOrigin=""))}function showImage(e,r){e.shadowRoot.innerHTML=r,applyScale(e),triggerEvent(e,"render",r)}function showError(e,r){return console.error("Graphviz failed:",r),e.shadowRoot.innerHTML=r.message,triggerEvent(e,"error",r)}function updateGraph(e){return new Promise(r=>{if(e.shadowRoot.innerHTML="",!e.graph)return r();let t=requestRendering(e,void 0,function n({data:s}){let{svg:a,error:i,render_id:o}=s;if(t===o){if(closeRendering(n),i)return i.message=i.message.trim(),showError(e,i),r(i);showImage(e,a),r(a)}})})}function tryUpdateGraph(e,r){return new Promise((t,n)=>{if(!r)return e[graphKey]="",e.shadowRoot.innerHTML="",t();let s=requestRendering(e,r,function a({data:i}){let{svg:o,error:h,render_id:l}=i;if(s===l){if(closeRendering(a),h)return n(h);e[graphKey]=r,showImage(e,o),t(o)}})})}class GraphvizGraphElement extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.graphCompleted=Promise.resolve()}get graph(){return this[graphKey]}set graph(e){this.setAttribute("graph",e)}get scale(){return this[scaleKey]}set scale(e){this.setAttribute("scale",e)}attributeChangedCallback(e,r,t){switch(e){case"graph":this[graphKey]=t,this.graphCompleted=updateGraph(this).catch(e=>e);break;case"scale":this[scaleKey]=t,applyScale(this)}}tryGraph(e){let r=tryUpdateGraph(this,e);return this.graphCompleted=r.catch(e=>e),r}static get observedAttributes(){return["graph","scale"]}}customElements.define("graphviz-graph",GraphvizGraphElement);export{GraphvizGraphElement as default};
//# sourceMappingURL=graph.min.mjs.map
