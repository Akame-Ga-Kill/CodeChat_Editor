<h1>1. CodeChat Editor overview</h1>
<p>The CodeChat Editor should be a GUI-based programmer's word processor /
    Jupyter for software developers. This document records its overall design.
</p>
<p>These headings are manually numbered; they will be automatically numbered.
</p>
<h2><a id="how-to-run"></a>1.1 How to run</h2>
<p>The <a href="https://github.com/bjones1/CodeChat_Editor">CodeChat Editor
        repository</a>&nbsp;contains the code for this application. To try it
    out:</p>
<ol>
    <li>Clone or download the repository.</li>
    <li><a href="https://www.rust-lang.org/tools/install">Install the Rust
            language</a>. I recommend the 64-bit toolset for Windows.</li>
    <li><a
            href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm">Install
            NPM</a> (the Node.js package manager).</li>
    <li>Install all NPM dependencies: in the
        <code>client/</code>&nbsp;directory, run <code>npm install</code>.</li>
    <li>Package all JavaScript dependencies from NPM: also in
        the&nbsp;<code>client/</code>&nbsp;directory, run <code>npm run
            build</code>.</li>
    <li>In the <code>server/</code> directory, execute <code>cargo run</code>.
    </li>
    <li>Open <code>http://localhost:8080</code> in your browser.</li>
    <li>Open the file <code>README.cchtml</code>.</li>
</ol>
<h2><a id="vision"></a>1.2 Vision</h2>
<p>These form a set of high-level requirements to guide the project.</p>
<ul>
    <li>View source code as <a id="vision-code-blocks-and-doc-blocks"></a><a
            href="index.cchtml#code-blocks-and-doc-blocks">code blocks and doc
            blocks</a>. Doc blocks are lines of source which contain only
        correctly-formatted comments.</li>
    <li>Provide support for a <a
            id="vision-programming-language-support"></a><a
            href="index.cchtml#programming-language-support">wide variety of
            programming languages</a>.</li>
    <li>Provide integration with a <a id="vision-ide-integration"></a><a
            href="index.cchtml#ide-integration">wide variety of IDEs/text
            editors</a>.</li>
    <li>Load a document from source code, allow edits in a GUI, then save it
        back to source code.
        <ul>
            <li>Provide word processor GUI tools (insert hyperlink, images,
                headings, change font, etc) for doc blocks.</li>
            <li>Provide text editor/IDE tools (syntax highlighting, line
                numbers, show linter feedback) for code blocks.</li>
        </ul>
    </li>
    <li>Zero build: eliminate the traditional project build process -- make it
        almost instantaneous.</li>
    <li>Doc block markup should be readable and well-known.</li>
    <li>Support both a single-file mode and a project mode.
        <ul>
            <li>A project is a specific directory tree, identified by the
                presence of a TOC.&nbsp;I like&nbsp;<a
                    href="https://rust-lang.github.io/mdBook/format/summary.html">mdbook's
                    appearance</a>,</li>
            <li>A page in a project build is a single-file page plus:
                <ul>
                    <li>A TOC, along with previous/next/up navigation. The TOC
                        is synchronized to the current page.</li>
                    <li>Numbering comes from the current page's location within
                        the TOC. Pages not in the TOC aren't numbered.</li>
                </ul>
            </li>
        </ul>
    </li>
    <li><a id="authoring-support"></a>Provide <a
            href="index.cchtml#authoring-support">authoring support</a>, which
        allows authors to easily create book/project-like features. In
        particular:
        <ul>
            <li>Counters for numbering figures, tables, equations, etc.</li>
            <li>References (to a section, figure, table, etc.) via auto-titled
                links: the link text is automatically derived from the link's
                destination (the heading text at the link's destination; a
                figure/table caption, etc.).</li>
            <li>Bidirectional links, which can be used for
                footnotes/endnotes/citations and indices. The source of a
                bidirectional link must specify an anchor name, a target (file
                and anchor in the file), the text to display at the target
                (typically, the section which contains the source link), and
                where to locate this text relative to the target anchor.</li>
            <li>A page-local TOC, in order to produce the overall TOC.</li>
            <li>Autogenerated anchor names and autogenerated anchors for all
                headings.</li>
            <li>Hyperlinks to identifiers in code (use <a
                    href="https://github.com/universal-ctags/ctags">ctags</a>).
                Perhaps autogenerated titles as well.</li>
            <li>Substitutions.</li>
            <li>Files/anchors can be freely moved without breaking links.</li>
        </ul>
    </li>
    <li>Provide a GUI to make picking a file/anchor easy.</li>
    <li>Provide edit, view, and view raw source options.</li>
</ul>
<h3>Nice to have features</h3>
<ul>
    <li>Simple to install locally; support some sort of web-based IDE. Ideas:
        allow editing a GitHub repo directly.</li>
    <li>Support a static build: producing a set of view-only HTML files which
        don't need a server for a project, or a single HTML file outside a
        project.</li>
</ul>
<h2><a id="specification"></a>1.3 Requirements</h2>
<p>The requirements expand on the vision by providing additional details.</p>
<h3><a id="specification-code-blocks-and-doc-blocks"></a>Code blocks and doc
    blocks</h3>
<p>Comments in most programming languages are either inline comments (which are
    terminated by a newline) or block comments, which may span multiple lines.
    In C/C++, the opening delimiter for an inline comment
    is&nbsp;<code>//</code>. Likewise, <code>/*</code> and <code>*/</code>
    define the opening and closing delimiters for block comments.</p>
<p>This design treats source code on a line-by-line basis. It does not classify
    at any deeper granularity -- for example, it does not support a mix of code
    block and doc block on the same line.</p>
<p>A code block consists of all lines in a source file which aren't classified
    as a doc block. Note that code blocks may consist entirely of a comment, as
    illustrated below.</p>
<p>A doc block consists of a comment (inline or block) optionally preceded by
    whitespace and optionally succeeded by whitespace. At least one whitespace
    character must separate the opening comment delimiter from the doc block
    text. Some examples in C:</p>
<pre>void foo(); // This is not a doc block, because these comments are preceded<br>void bar(); // by non-whitespace characters. Instead, they're a code block.<br>//This is not a doc block, because these inline comments lack<br>//whitespace after the opening comment delimiter //. They're also a code block.<br>/*This is not a doc block, because this block comment lacks<br>  whitespace after the opening comment delimiter /*. It's also a code block. */<br>/* This is not a doc block, because non-whitespace <br>   characters follow the closing comment delimiter. <br>   It's also a code block. */ void food();<br><br>// This is a doc block. It has no whitespace preceding the inline<br>// comment delimiters and one character of whitespace following it.<br>  // This is also a doc block. It has two characters of whitespace <br>  // preceding the comment delimiters and one character of whitespace following it.<br>/* This is a doc block. Because it's based on<br>   a block comment, a single comment can span multiple lines. */<br>/* This is also a doc block, even without the visual alignment<br>or a whitespace before the closing comment delimiter.*/<br>  /* This is a doc block<br>     as well. */</pre>
<p>Doc blocks are differentiated by their indent: the whitespace characters
    preceding the opening comment delimiter. Adjacent doc blocks with identical
    indents are combined into a single, larger doc block.</p>
<pre>// This is all one doc block, since only the preceding<br>//   whitespace (there is none) matters, not the amount of <br>// whitespace following the opening comment delimiters.<br>  // This is the beginning of a different doc<br>  // block, since the indent is different.<br>    // Here's a third doc block; inline and block comments<br>    /* combine as long as the whitespace preceeding the comment<br>delimiters is identical. Whitespace inside the comment doesn't affect<br>       the classification. */<br>// These are two separate doc blocks,<br>void foo();<br>// since they are separated by a code block.</pre>
<h3><a id="implementation-programming-language-support"></a><a
        href="index.cchtml#programming-language-support">Programming language
        support</a></h3>
<p>Initial targets come from the Stack Overflow Developer Survey 2022's section
    on&nbsp;<a
        href="https://survey.stackoverflow.co/2022/#section-most-popular-technologies-programming-scripting-and-markup-languages">programming,
        scripting, and markup languages</a> and IEEE Spectrum's <a
        href="https://spectrum.ieee.org/top-programming-languages-2022">Top
        Programming Languages 2022</a>.</p>
<h3><a id="specification-ide-integration"></a>IDE/text editor integration</h3>
<p>Initial targets come from the Stack Overflow Developer Survey 2022's section
    on&nbsp;<a
        href="https://survey.stackoverflow.co/2022/#section-most-popular-technologies-integrated-development-environment">integrated
        development environments</a>.</p>
<h3>Zero-build support</h3>
<p>The "build" should occur immediately (to any open files) or when when saving
    a file (to closed files, which will be updated when they're next opened).
    Exception: edits to the TOC are applied only after a save.</p>
<h3>Authoring support</h3>
<p>This system should support custom tags to simplify the authoring process.
    The GUI must indicate that text enclosed by the tags isn't directly
    editable, instead providing an option to edit the underlying tag that
    produced the text. When a new tag is inserted, any tag-produced content
    should be immediately added.</p>
<h4>Counters</h4>
<p>Counters are not global; they're local to a page. Instead, they take the
    prefix from the TOC value assigned to the preceding heading tag.</p>
<h4>References (auto-titled links)</h4>
<p>The link text is automatically derived from the link's destination (the
    heading text at the link's destination, for example). The text must not be
    editable in the GUI, since it will be overwritten by updates to the linked
    text.</p>
<h4>Bidirectional links</h4>
<p>The source of a bidirectional link must specify:</p>
<ul>
    <li>An anchor name</li>
    <li>A target (the globally-unique anchor)</li>
    <li>The text to display at the target (typically, the section which
        contains the source link).</li>
    <li>Where to locate this text relative to the target anchor.</li>
</ul>
<p>To create a footnote/endnote/citation, pick a place in the document (end of
    section / bottom of page / bibliography) then type the text in. Next,
    create a bidirectional link to the place to insert the
    footnote/endnote/citation. The text of the link should come from the
    footnote/endnote/bibliography number just created.</p>
<h4>Autogenerated anchor names and autogenerated anchors for all headings</h4>
<p>The GUI should suggest an autogenerated name for anchors. This is a string
    of random characters; HTML allows upper/lowercase ASCII plus the hyphen and
    underscore for IDs, meaning that a 5-character string provides &gt;250
    million unique anchors.</p>
<p>To make headings easy to link to, all headings should receive autogenerated
    anchors. On hover, the headings should show a link symbol. Scrolling in the
    document to another heading should cause the TOC highlight to update.</p>
<h4>Page-local TOC</h4>
<p>A special tag (probably only for use in the TOC). Inputs: file to reference.
    Output: the hyperlinked title (<code>&lt;h1&gt;</code> tag's text) of the
    page, with nested lists for subheadings (with links to each subheading).
    Subpages of a page show up after headings on that page. The author may
    specify what depth of headings appear in the TOC on a global and per-page
    basis.</p>
<h4>Movable files/anchors</h4>
<p>To make moving files/anchors (or anything an anchor is attached to --
    headings, figures, etc.) easy, require that all anchor be unique across the
    entire project, instead of unique just in the current file. Then, internal
    links can be reduced to the anchor; during hydration, the path to the file
    containing that anchor) is fetched from the cache. Place an anchor at the
    top of every file to uniquely identify it, and change links to a file to
    instead refer to this anchor.</p>
<p>How to handle the case where an anchor isn't found in the cache? We'd then
    need to update the cache for the entire project, which might be expensive
    but also rare. Perhaps perform this update in the background.&nbsp;</p>
<h3>Hyperlink support</h3>
<p>This system relies on the user to create a lot of meaningful links; it must
    make the creation and maintainance of links simple:</p>
<ul>
    <li>Make it easy to create a link to another file/anchor via GUI support.
        <ul>
            <li>Provide a file browser-like dialog to select a file, then an
                anchor inside that file. For files, show the title as well as
                the file name; for anchors, show the surrounding text. Provide
                an isearch to make searching easier.</li>
            <li>Allow the user to copy a link to any anchor, then paste that
                into the GUI as another way of creating a link.</li>
        </ul>
    </li>
    <li>Clicking on an anchor should both browse to the page and also highlight
        the anchor's associated text.</li>
    <li>On hover, hyperlinks should show a preview of the linked web page.</li>
</ul>
<h2>License</h2>
<p>Copyright (C) 2022 Bryan A. Jones.</p>
<p>This file is part of the CodeChat Editor.</p>
<p>The CodeChat Editor is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by the
    Free Software Foundation, either version 3 of the License, or (at your
    option) any later version.</p>
<p>The CodeChat Editor is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
    more details.</p>
<p>You should have received a <a href="LICENSE.html">copy</a> of the GNU
    General Public License along with the CodeChat Editor. If not, see <a
        href="https://www.gnu.org/licenses/">https://www.gnu.org/licenses/</a>.
</p>
